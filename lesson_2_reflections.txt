What happens when you initialise a respository? 
git will create an empty repository will the following message:
Initialized empty Git repository in C:\ ...
this will be a hidden directory .git

Why to you need to do it?
So my git repository is ready for commits.

How is the staging area different from the working directory and the repository?
The staging area is a place where you add files before they are committed. This allows single or multiple files to be committed to the git respository. The working directory is where files are MACD'ed in day to day working.

What value do you think it offers?
It gives flexibility to add just one file or multiple files together into a commit. This lets the user logically group the files together or keep them separate prior to a commit.

How can you use the staging area to make sure you have one commit per logical change?
By making sure that the file you add to the staging area is logically one change. You can still leave other changed files in the working directory ready to be moved to the staging area in the future.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
These would help so much. Take my Android programming challenges, I could use a branch to complete a challenge while leaving the book's code intact.

How do the diagrams help you visualize the branch structure?
I can see how the idea of commits and a branch work together.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
The code in each of the files is moved into one new file that becomes the master. The diagram reflects what is happening in a visual way.

What are the pros and cons of Git's automatic merging vs. always doing merges manually?
Pro of manual is that you have control of what gets merged. Con is that you have to do it manually. Pro of automatic merging is that it happens. The con is that you may erase valid code changes.